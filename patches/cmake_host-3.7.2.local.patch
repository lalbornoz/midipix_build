diff -ru cmake-3.7.2.orig/Source/cmServerProtocol.cxx cmake-3.7.2/Source/cmServerProtocol.cxx
--- cmake-3.7.2.orig/Source/cmServerProtocol.cxx	2017-01-13 15:05:41.000000000 +0100
+++ cmake-3.7.2/Source/cmServerProtocol.cxx	2025-08-04 22:21:35.256059799 +0200
@@ -26,6 +26,7 @@
 #include <algorithm>
 #include <string>
 #include <vector>
+#include <limits>
 
 // Get rid of some windows macros:
 #undef max
Only in cmake-3.7.2/Source: cmServerProtocol.cxx.orig
diff -ru cmake-3.7.2.orig/Utilities/cmcurl/lib/hostip.c cmake-3.7.2/Utilities/cmcurl/lib/hostip.c
--- cmake-3.7.2.orig/Utilities/cmcurl/lib/hostip.c	2017-01-13 15:05:42.000000000 +0100
+++ cmake-3.7.2/Utilities/cmcurl/lib/hostip.c	2025-08-04 22:38:59.365974526 +0200
@@ -533,7 +533,7 @@
  * within a signal handler which is nonportable and could lead to problems.
  */
 static
-RETSIGTYPE alarmfunc(int sig)
+void alarmfunc(int sig)
 {
   /* this is for "-ansi -Wall -pedantic" to stop complaining!   (rabe) */
   (void)sig;
diff -ru cmake-3.7.2.orig/Utilities/cmcurl/lib/vtls/openssl.c cmake-3.7.2/Utilities/cmcurl/lib/vtls/openssl.c
--- cmake-3.7.2.orig/Utilities/cmcurl/lib/vtls/openssl.c	2017-01-13 15:05:42.000000000 +0100
+++ cmake-3.7.2/Utilities/cmcurl/lib/vtls/openssl.c	2025-08-04 22:21:35.255334959 +0200
@@ -108,8 +108,7 @@
 #define OPENSSL_NO_SSL2
 #endif
 
-#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && /* OpenSSL 1.1.0+ */ \
-  !defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) /* OpenSSL 1.1.0+ */
 #define SSLeay_add_ssl_algorithms() SSL_library_init()
 #define SSLEAY_VERSION_NUMBER OPENSSL_VERSION_NUMBER
 #define HAVE_X509_GET0_EXTENSIONS 1 /* added in 1.1.0 -pre1 */
@@ -117,8 +116,7 @@
 #define HAVE_OPAQUE_RSA_DSA_DH 1 /* since 1.1.0 -pre5 */
 #endif
 
-#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL) && /* 1.0.2 or later */ \
-  !defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL) /* 1.0.2 or later */
 #define HAVE_X509_GET0_SIGNATURE 1
 #endif
 
@@ -1315,8 +1313,7 @@
   ch = SSL_get_peer_cert_chain(connssl->handle);
   st = SSL_CTX_get_cert_store(connssl->ctx);
 
-#if ((OPENSSL_VERSION_NUMBER <= 0x1000201fL) /* Fixed after 1.0.2a */ || \
-     defined(LIBRESSL_VERSION_NUMBER))
+#if (OPENSSL_VERSION_NUMBER <= 0x1000201fL) /* Fixed after 1.0.2a */
   /* The authorized responder cert in the OCSP response MUST be signed by the
      peer cert's issuer (see RFC6960 section 4.2.2.2). If that's a root cert,
      no problem, but if it's an intermediate cert OpenSSL has a bug where it
Only in cmake-3.7.2/Utilities/cmcurl/lib/vtls: openssl.c.orig
diff -ru cmake-3.7.2.orig/Utilities/cmlibarchive/libarchive/archive_openssl_hmac_private.h cmake-3.7.2/Utilities/cmlibarchive/libarchive/archive_openssl_hmac_private.h
--- cmake-3.7.2.orig/Utilities/cmlibarchive/libarchive/archive_openssl_hmac_private.h	2017-01-13 15:05:42.000000000 +0100
+++ cmake-3.7.2/Utilities/cmlibarchive/libarchive/archive_openssl_hmac_private.h	2025-08-04 22:21:35.256294510 +0200
@@ -28,7 +28,8 @@
 #include <openssl/hmac.h>
 #include <openssl/opensslv.h>
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || \
+    (defined(LIBRESSL_VERSION_NUMBER) && LIBRESSL_VERSION_NUMBER < 0x2070000fL)
 #include <stdlib.h> /* malloc, free */
 #include <string.h> /* memset */
 static inline HMAC_CTX *HMAC_CTX_new(void)
Only in cmake-3.7.2/Utilities/cmlibarchive/libarchive: archive_openssl_hmac_private.h.orig
